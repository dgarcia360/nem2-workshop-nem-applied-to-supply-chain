---
layout: post
title:  "Registering products"
permalink: /lessons/registering-products/
---

Open the [dashboard](http://localhost:4200). The warehouse operator uses it to register products and send safety seals. However, the integration with NEM blockchain technology is not 100% done. You will have to complete some missing pieces of code to make the use case work.

## Background

Registering a product consists of:

1) Create a new product in the existent SQL database.

2) Create a new blockchain account.

3) Send an initial transaction to the account.

The operator will click ``Create Product`` button in the web app. The server, which has loaded the company account, will create the product and announce the transaction to the blockchain. 

Although the operator performs the action, we have decided to announce the transaction from the server side. This enables us to add the company as the owner of the account in the moment of the creation.

![use-case-nem-creation]({{ site.baseurl }}/assets/images/use-case-nem-creation.png){:width="700px"}

## Instructions

Under ``Create Product`` tab, click ``Create New Product`` button.

![screenshot-register-product]({{ site.baseurl }}/assets/images/screenshot-register-product.png){:width="800px"}

{% include note.html content=" The server, the dashboard, and catapult service bootstrap  must be running." %}

When clicking the button, you are making an HTTP POST request to the server. The company's server is responsible for creating a new product and saving it in the database.

The public key is generated directly in the dashboard. We are applying the sha256 cryptographic hash algorithm to ('company' +  productId). This latest productId generated by the MySQL database. 

### Is the product in the blockchain? 

1\. Click the product's number. The product information screen shows the state of a product. As you can see, NEM blockchain does not know anything about this product yet. 

![screenshot-first-transfer-transaction]({{ site.baseurl }}/assets/images/screenshot-first-transfer-transaction.png){:width="800px"}

This is because the piece of code that registers the product in the blockchain is pending to be developed. The product will be stored on the blockchain with the first issued transaction. 

2\. Open ``project/server/.env``, and define the company's private key.

{% highlight console %}
COMPANY_PRIVATE_KEY='B...3'
{% endhighlight %}

{% include note.html content="You can retrieve any account created running 'nem2-cli profile list' command." %}

3\. Open ``project/server/src/domain/product/product.service.ts`` and complete ``registerProductBlockchain`` function. After saving the product in the database, this function is called to timestamp the product creation.

Inside ``registerProductBlockchain``, create a deterministic public key for the product. 
        
{% highlight typescript %}
const companyIdentifier = 'company';
const productPublicKey = sha3_256(companyIdentifier + product.id);
{% endhighlight %}

{% include note.html content="Remember that product accounts don't need to send transactions. By doing this, if the database references are lost, the product information will still be retrievable from the blockchain." %}

Continue Create a transfer transaction setting the ``productPublicKey`` as the recipient. You can append a message indicating who is the owner of the product and it's id.

{% highlight typescript %}
const transferTransaction = TransferTransaction.create(
    Deadline.create(),
    PublicAccount.createFromPublicKey(productPublicKey, NetworkType.MIJIN_TEST).address,
    [],
    PlainMessage.create("asset("+product.id+"):" + companyIdentifier),
    NetworkType.MIJIN_TEST);
);
{% endhighlight %}
                             
Sign the transaction with the company's account.

{% highlight typescript %}
const companyPrivateKey = process.env.COMPANY_PRIVATE_KEY as string;
const companyAccount = Account.createFromPrivateKey(companyPrivateKey, NetworkType.MIJIN_TEST);
const signedTransaction = companyAccount.sign(transferTransaction);
{% endhighlight %}

Once the transaction is created and signed with the company's account, announce it to the network.
 
{% highlight typescript %}
    return this.transactionHttp
        .announce(signedTransaction);
{% endhighlight %}

## Testing your changes

1\. **Restart the server to apply the changes** running again ``npm start``.

2\. Go back to the dashboard. Under ``Create Product`` tab, ``Create New Product``.
 
3\.Click on the product's number, and wait a few seconds until the transaction gets confirmed. 

Under **Last 10 transactions**, can you see the product registered in the blockchain?

![screenshot-product-detail]({{ site.baseurl }}/assets/images/screenshot-product-detail.png){:width="800px"}
